

# Main Gazebo Thermostat Module - Page 0 & Core System
# Core system functionality and page 0 weather display

# Import modular components
packages:
  weather: !include weather.yaml
  thermostat: !include thermostat.yaml

esphome:
  name: gazebo-thermostat
  on_boot:
    - priority: -100
      then:
        - logger.log: "Gazebo Thermostat System - Modular Version Started"
        - delay: 2s
        - component.update: gazebo_temp
        - delay: 1s
        - lambda: |-
            ESP_LOGI("boot", "=== Module System Status ===");
            ESP_LOGD("boot", "Thermostat mode at boot: %s", id(thermostat_mode).state.c_str());
            ESP_LOGD("boot", "Desired temp at boot: %.1f", id(temp_desired).state);
            ESP_LOGD("boot", "Hysteresis at boot: %.1f", id(hysteresis).state);
            // Initialize last_heating_change to current time to avoid safety delay on boot
            id(last_heating_change) = millis();
            ESP_LOGI("boot", "Core system initialized");
        - delay: 10s  # Wait for Home Assistant API connection
        - logger.log: "Testing weather module functionality after 10s delay"
        - script.execute: update_weather_display
        - delay: 2s
        - lambda: |-
            ESP_LOGI("boot", "=== Weather Module Connection Test ===");
            ESP_LOGI("boot", "NH Meteo Temp state: %s", id(nh_meteo_temp).has_state() ? "CONNECTED" : "NO DATA");
            ESP_LOGI("boot", "NH Meteo Humidity state: %s", id(nh_meteo_humidity).has_state() ? "CONNECTED" : "NO DATA");

            ESP_LOGI("boot", "=== OpenWeather Forecast Boot Check ===");
            ESP_LOGI("boot", "Forecast Hour 0 state: %s", id(forecast_hour_0).has_state() ? "CONNECTED" : "NO DATA");
            ESP_LOGI("boot", "Forecast Temp 0 state: %s", id(forecast_temp_0).has_state() ? "CONNECTED" : "NO DATA");
            ESP_LOGI("boot", "Forecast Feels Like 0 state: %s", id(forecast_feels_like_0).has_state() ? "CONNECTED" : "NO DATA");
            ESP_LOGI("boot", "Forecast Humidity 0 state: %s", id(forecast_humidity_0).has_state() ? "CONNECTED" : "NO DATA");
            ESP_LOGI("boot", "Forecast Precipitation 0 state: %s", id(forecast_precipitation_0).has_state() ? "CONNECTED" : "NO DATA");

            if (id(nh_meteo_temp).has_state()) {
              ESP_LOGI("boot", "NH Meteo Temp value: %.1f C", id(nh_meteo_temp).state);
            }
            if (id(nh_meteo_humidity).has_state()) {
              ESP_LOGI("boot", "NH Meteo Humidity value: %.1f%%", id(nh_meteo_humidity).state);
            }

            if (id(forecast_hour_0).has_state()) {
              ESP_LOGI("boot", "Forecast Hour 0 value: %.1f", id(forecast_hour_0).state);
            }
            if (id(forecast_temp_0).has_state()) {
              ESP_LOGI("boot", "Forecast Temp 0 value: %.1f C", id(forecast_temp_0).state);
            }
            if (id(forecast_feels_like_0).has_state()) {
              ESP_LOGI("boot", "Forecast Feels Like 0 value: %.1f C", id(forecast_feels_like_0).state);
            }

            ESP_LOGI("boot", "Weather module check complete");
        - delay: 1s
        - logger.log: "Restoring Page 3 thermostat display from saved values"
        - script.execute: restore_thermostat_display

esp32:
  board: esp32dev
  framework:
    type: esp-idf
    version: recommended
  
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: none
  fast_connect: true
  output_power: 17dB
  manual_ip:
    static_ip: 192.168.0.242
    gateway: 192.168.0.1
    subnet: 255.255.255.0
  reboot_timeout: 15min

  # WiFi connection monitoring
  on_connect:
    - logger.log: "WiFi connected successfully"
    - lambda: |-
        ESP_LOGI("wifi", "Connected to WiFi with IP: %s", id(wifi_ip).state.c_str());

  on_disconnect:
    - logger.log:
        format: "WiFi disconnected - attempting reconnection"
        level: WARN
    - lambda: |-
        ESP_LOGW("wifi", "WiFi connection lost - system will continue in standalone mode");

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Gazebo-Thermostat-Fallback"
    password: "configesp32"

captive_portal:

# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API
api:
  reboot_timeout: 0s
  on_client_connected:
    - logger.log: "🔗 Home Assistant API client connected!"
  on_client_disconnected:
    - logger.log: "❌ Home Assistant API client disconnected!"
  services:
    - service: test_homeassistant_connection
      then:
        - logger.log: "Testing Home Assistant connection via API service call"

ota:
  platform: esphome
  password: !secret ota_password
  on_begin:
    - logger.log: "OTA update started - system entering safe mode"
    - lambda: |-
        // Turn off heating during OTA for safety
        if (id(heating_state)) {
          ESP_LOGI("ota", "Turning off heating for OTA safety");
          id(gazebo_relay).turn_off();
          id(heating_state) = false;
        }
  on_progress:
    - logger.log:
        format: "OTA progress: %0.0f%%"
        args: ["x"]
  on_end:
    - logger.log: "OTA update completed successfully"
  on_error:
    - logger.log:
        format: "OTA update failed with error: %s"
        args: ["x"]
        level: ERROR
    - lambda: |-
        ESP_LOGE("ota", "OTA update failed - system will reboot to safe firmware");
        // Note: ESPHome will automatically reboot to previous firmware

# Safe mode component
safe_mode:
  reboot_timeout: 10min
  num_attempts: 3

# Enable Web Server
web_server:
  port: 80

# Time component for NTP with fallback servers
time:
  - platform: sntp
    id: sntp_time
    timezone: America/New_York
    servers:
      - pool.ntp.org
      - time.google.com
      - time.cloudflare.com
    update_interval: 6h
    on_time_sync:
      - logger.log: "Time synchronized with NTP server"
    on_time:
      - seconds: 0
        minutes: 0
        hours: 0
        then:
          - logger.log: "Daily time sync check completed"

# UART for Nextion display
uart:
  - id: uart_nextion
    tx_pin: 17  # TXD2
    rx_pin: 16  # RXD2
    baud_rate: 9600
    rx_buffer_size: 1024  # Increase buffer to handle Nextion data

# One Wire bus for DS18B20 temperature sensor (commented out for testing)
# one_wire:
#   - platform: gpio
#     pin: 4
#     id: gpio_4

# Core system sensors (display and WiFi monitoring only)
sensor:
  # WiFi Signal Strength for system monitoring
  - platform: wifi_signal
    name: "Gazebo WiFi Signal"
    update_interval: 60s
    internal: true

  # Uptime sensor for system monitoring
  - platform: uptime
    name: "Gazebo Uptime"
    internal: true


# Core system binary sensors
binary_sensor:
  - platform: status
    name: "Gazebo Status"

# Core system text sensors
text_sensor:
  - platform: wifi_info
    ip_address:
      name: "Gazebo IP Address"
      id: wifi_ip
      internal: true
    ssid:
      name: "Gazebo Connected SSID"
      id: wifi_ssid_sensor
      internal: true


# Climate component for thermostat functionality (disabled - using custom control)
# climate:
#   - platform: thermostat
#     name: "Gazebo Thermostat"
#     sensor: gazebo_temp
#     min_heating_off_time: 300s
#     min_heating_run_time: 300s
#     min_idle_time: 30s
#     heat_action:
#       - switch.turn_on: gazebo_relay
#       - globals.set:
#           id: heating_state
#           value: 'true'
#       - globals.set:
#           id: last_heating_change
#           value: !lambda 'return millis();'
#     idle_action:
#       - switch.turn_off: gazebo_relay
#       - globals.set:
#           id: heating_state
#           value: 'false'
#       - globals.set:
#           id: last_heating_change
#           value: !lambda 'return millis();'
#     default_preset: Home
#     preset:
#       - name: Home
#         default_target_temperature_low: 18°C
#       - name: Away
#         default_target_temperature_low: 15°C



# Nextion Display - All Pages with Modular Architecture
display:
  - platform: nextion
    id: nextion_display
    uart_id: uart_nextion
    update_interval: 10s
    on_setup:
      then:
        - delay: 2s
        - lambda: |-
            ESP_LOGI("nextion", "Modular Display System - Initializing all pages");
            ESP_LOGI("nextion", "Testing display communication...");
            id(nextion_display).send_command_printf("sendme");
            ESP_LOGI("nextion", "Modular display initialization completed");
    lambda: |-
      // Update temperature and humidity on page 0 text components (t0 and t1)
      if (!isnan(id(nh_meteo_temp).state)) {
        int temp_int = (int)round(id(nh_meteo_temp).state);
        it.set_component_value("feels_like", temp_int);
      }

      if (!isnan(id(nh_meteo_humidity).state)) {
        int hum_int = (int)round(id(nh_meteo_humidity).state);
        it.set_component_value("rain", hum_int);
      }
      // Existing: Update thermostat data on page 3
      float current_temp = id(gazebo_temp).state;
      if (!std::isnan(current_temp) && current_temp >= -50 && current_temp <= 60) {
        int temp_int = (int)round(current_temp);
        it.set_component_value("n1", temp_int); // "n1" as per your thermostat page design
        ESP_LOGD("display", "Page 3: n1(Current)=%d C", temp_int);
      } else {
        ESP_LOGW("display", "Page 3: Invalid current temperature: %.1f C", current_temp);
      }
      ESP_LOGD("display", "Core display system updated - thermostat page");



# HTTP request component for weather API (if needed)
http_request:
  useragent: esphome/gazebo-thermostat
  timeout: 10s

